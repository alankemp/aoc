
function sort(mut values: [i64]) {
    mut i = 0
    while i < values.size() as! i64 - 1 {
        mut j = 0
        while j < (values.size() as! i64) - i - 1 {
            if values[j] > values[j + 1] {
                let tmp = values[j]
                values[j] = values[j + 1]
                values[j + 1] = tmp
            }
            ++j
        }
        ++i
    }
}

function read_file_to_list(file_path: String) throws -> [String] {

    mut lines: [String] = []

    mut file = File::open_for_reading(file_path)
    mut builder = StringBuilder::create()
    for b in file.read_all() {
        if (b == '\n' as! u8) {
            lines.push(builder.to_string())
            builder.clear()
        } else {
            builder.append(b)
        }
    }

    lines.push(builder.to_string())

    return lines
}

function split_string_to_chars_offset(str: String, start: usize, end: usize) throws -> [u8] {
    mut pos: usize = start;
    mut result: [u8] = [];

    while pos < end {
        let ch = str.byte_at(pos) as! u8
        result.push(ch)
        pos++;
    }

    return result
}

function split_string_to_chars(str: String) throws -> [u8] {
    return split_string_to_chars_offset(str: str, start: 0, end: str.length())
}

function find_common2<T>(lhs: [T], rhs: [T]) -> T {
    for ch in lhs {
        if rhs.contains(ch) {
            return ch
        }
    }

    return 0
}

function find_common3<T>(a: [T], b: [T], c: [T]) -> T {
    for ch in a {
        if b.contains(ch) and c.contains(ch) {
            return ch
        }
    }

    return 0
}

function int_to_ascii(n: u8) -> String {
    return match n {
        48 => "0",
        49 => "1",
        50 => "2",
        51 => "3",
        52 => "4",
        53 => "5",
        54 => "6",
        55 => "7",
        56 => "8",
        57 => "9",

        65 => "A",
        66 => "B",
        67 => "C",
        68 => "D",
        69 => "E",
        70 => "F",
        71 => "G",
        72 => "H",
        73 => "I",
        74 => "J",
        75 => "K",
        76 => "L",
        77 => "M",
        78 => "N",
        79 => "O",
        80 => "P",
        81 => "Q",
        82 => "R",
        83 => "S",
        84 => "T",
        85 => "U",
        86 => "V",
        87 => "W",
        88 => "X",
        89 => "Y",
        90 => "Z",

        else => ""
    }
}